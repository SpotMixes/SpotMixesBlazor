@page "/actualizar-audio/{AudioId}"
@using SpotMixesBlazor.Client.Helpers
@using System.Net.Http.Headers
@using System.Net
@attribute [Authorize]
@layout MainLayout
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<Content>
    @if (_isDj)
    {
        <!-- Basic Inputs start -->
        <section id="basic-input">
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Editar audio</h4>
                        </div>
                        <div class="card-body">
                            <EditForm Model="_audio" OnValidSubmit="UpdateAudio"  class="row">
                                <div class="col-xl-4 col-md-6 col-12">
                                    <div class="d-flex justify-content-center">
                                        <img class="img-fluid round" style="object-fit: cover; width: 400px; height: 400px;"
                                             src="@_urlCover" alt="Imagen de actualización">
                                    </div>
                                    <div class="mt-1 mb-1">
                                        <label for="updateAudioUrlCover" class="form-label">Cambiar imagen</label>
                                        <InputFile class="form-control" id="updateAudioUrlCover" tabindex="1"
                                                   accept="image/*" OnChange="OnCoverChange" @bind-Value="_audio.UrlCover">
                                        </InputFile>
                                        <div class="text-danger form-label">
                                            <ValidationMessage For="() => _audio.UrlCover"/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xl-8 col-md-6 col-12">
                                    <div class="d-flex flex-column justify-content-between">
                                        <DataAnnotationsValidator></DataAnnotationsValidator>
                                        <div class="mb-1">
                                            <label for="updateAudioTitle" class="form-label">Título</label>
                                            <InputText class="form-control" id="updateAudioTitle"
                                                       placeholder="Ingrese el título del mix" autofocus tabindex="2"
                                                       @bind-Value="_audio.Title">
                                            </InputText>
                                            <div class="text-danger form-label">
                                                <ValidationMessage For="() => _audio.Title"/>
                                            </div>
                                        </div>
                                        <div class="mb-1">
                                            <label for="updateAudioGenre" class="form-label">Genero:</label>
                                            <InputSelect class="form-select" id="updateAudioGenre" tabindex="3"
                                                         @bind-Value="_audio.Genres">
                                                <option selected>Seleccionar...</option>
                                                @foreach (var genre in _listsHelper.MusicGenres())
                                                {
                                                    @if (genre == _audio.Genres)
                                                    {
                                                        <option selected value="@genre">@genre</option>    
                                                    }
                                                    else
                                                    {
                                                        <option value="@genre">@genre</option>
                                                    }
                                                }
                                            </InputSelect>
                                            <div class="text-danger form-label">
                                                <ValidationMessage For="() => _audio.Genres"/>
                                            </div>
                                        </div>
                                        <div class="mb-1">
                                            <label for="textarea-counter" class="form-label">
                                                Descipción del mix
                                            </label>
                                            <InputTextArea data-length="500" class="form-control char-textarea"
                                                           id="textarea-counter" tabinx="4"
                                                           rows="3" placeholder="Ingresa una descripción del mix"
                                                           @bind-Value="_audio.Description" style="height: 100px">
                                            </InputTextArea>
                                            <div class="text-danger form-label">
                                                <ValidationMessage For="() => _audio.Description"/>
                                            </div>
                                            <small class="textarea-counter-value float-end">
                                                <span class="char-count">0</span> / 300
                                            </small>
                                        </div>
                                        <hr class="mb-1"/>
                                        <p class="mb-0">
                                            <strong>Importante:</strong> Al compartir este material,
                                            confirmas que tu pista cumple nuestras
                                            <a href="/">Condiciones de uso</a> y que no vulneras los
                                            derechos de nadie. En caso de dudas, consulta
                                            nuestras páginas de <a href="/">Información sobre derechos de autor</a>.
                                        </p>
                                        <hr class="mb-1"/>
                                        <div class="d-flex justify-content-end">
                                            <button class="btn btn-outline-primary me-2">Cancelar</button>
                                            @if (_updateProcess)
                                            {
                                                <button class="btn btn-warning" tabindex="5" disabled>
                                                    <span class="spinner-border spinner-border-sm" role="status" 
                                                          aria-hidden="true"></span>
                                                    Guardando...
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-warning" tabindex="5">Guardar cambios</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <!-- Basic Inputs end -->
    }
    else
    {
        <p>Eres oyente</p>
    }
</Content>

@code
{
    [Parameter]
    public string AudioId { get; set; }
    
    private AudioUpdateData _audio = new();
    private readonly ListsHelper _listsHelper = new();
    
    private IBrowserFile ImageFile { get; set; }
        private const long MaxImageUploadSize = 2 * 1000000;
    
    private string _urlCover;
    private bool _isDj;
    private bool _updateProcess;

    protected override async Task OnInitializedAsync()
    {
        var isDjString = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "IsDj");
        _isDj = bool.Parse(isDjString);

        await GetAudioByIdToUpdate();
        _urlCover = _audio.UrlCover;
    }

    private async Task GetAudioByIdToUpdate()
    {
        _audio = await _httpClient
            .GetFromJsonAsync<AudioUpdateData>($"api/audio/getAudioByIdToUpdate/{AudioId}");
    }
    
    private async Task OnCoverChange(InputFileChangeEventArgs e)
    {
        if (e?.File is null) return;

        if (e.File.Size > MaxImageUploadSize)
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "info",
                "Cover", $"🙄 El archivo debe ser menor a 2 MB");
            return;
        }

        _audio.UrlCover = "temporaryUrl";
        ImageFile = e.File;
    }
    
    private async Task SaveAudioCoverInTheCloud()
    {
        using var imageContent = new MultipartFormDataContent();
        try
        {
            var fileContent = new StreamContent(ImageFile.OpenReadStream(MaxImageUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(ImageFile.ContentType);
            imageContent.Add(fileContent, "\"files\"", ImageFile.Name);

            var responseImage = await _httpClient.PostAsync("api/upload/audios-covers", imageContent);

            if (responseImage.StatusCode == HttpStatusCode.OK)
            {
                _audio.UrlCover = await responseImage.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task UpdateAudio()
    {
        _updateProcess = true;
        
        if (_audio.UrlCover == "temporaryUrl") await SaveAudioCoverInTheCloud();

        if (_audio.UrlCover != "temporaryUrl")
        {
            _audio.Id = AudioId;
            var response = await _httpClient.PutAsJsonAsync("api/audio", _audio);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                _updateProcess = false;
                
                await _jsRuntime.InvokeVoidAsync("showToast", "success",
                    "Actualizar", "🥳 ¡Genial! Tú publicación se ha actualizado correctamente.");
                
                var urlProfile = await _jsRuntime
                    .InvokeAsync<string>("localStorage.getItem", "UrlProfile");

                _navigationManager.NavigateTo($"/perfil/{urlProfile}");
            }
            else
            {
                _updateProcess = false;
                
                await _jsRuntime.InvokeVoidAsync("showToast", "error",
                    "Actualizar", "😪 Error al actualizar el audio, inténtelo mas tarde.");
            }
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "error",
                "Actualizar", "😪 Servidor en mantenimiento, intente más tarde.");
        }
    }
}