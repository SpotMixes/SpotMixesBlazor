@page "/AudioDetails/{AudioId}"
@using SpotMixesBlazor.Shared.ModelsLookup
@using System.Net
@using Microsoft.AspNetCore.SignalR.Client
@layout MainLayout
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<Content>
    @if (_audioLookup == null)
    {
        <p>Audio no encontrado</p>
    }
    else
    {
        <div class="p-1" style="background: #283046; border-radius: 0.428rem;">
            <div class="row">
                <!-- Audio Cove -->
                <div class="col-sm-12 col-md-4">
                    <img src="@_audioLookup.UrlCover" alt="@_audioLookup.Title" style="width: 100%">
                </div>
                <!-- End Audio Cove -->
                <!-- End Audio Data -->
                <div class="col-sm-12 col-md-8">
                    <div class="content-audio__data d-flex flex-column">
                        <div class="audio__text d-flex flex-row">
                            <div class="audio__text__play d-flex justify-content-center align-items-center">
                                <button @onclick="PlayMusic" class="btn btn-icon rounded-circle btn-primary width-50 height-50">
                                    <i class="ri-play-fill"></i>
                                </button>
                            </div>
                            <div class="audio__text__title">
                                <h1 class="mt-2">@_audioLookup.Title</h1>
                                @if (_audioLookup.User != null)
                                {
                                    @foreach (var user in _audioLookup.User)
                                    {
                                        <a href="/profile/@user.Id">@user.DisplayName</a>
                                    }
                                }
                            </div>
                        </div>
                        <div class="audio__wave d-flex flex-column justify-content-center">
                            <div id="waveform" class="d-none d-sm-block"></div>
                        </div>
                        <div class="audio__reactions d-flex justify-content-between align-items-end">
                            <ReactionButton AudioId="@AudioId" IsHtmlP="false"></ReactionButton>
                            <a class="text-center text-white" style="font-size: 20px">
                                <i class="ri-chat-1-line" style="color: white"></i>
                                <samp style="margin-left: 5px">@_comments</samp>
                            </a>
                            <a href="" class="text-white">
                                <i class="ri-share-fill"></i> 500
                            </a>
                        </div>
                    </div>
                </div>
                <!-- End Audio Data -->
                <!-- Comment box -->
                <div class="col-12 mt-2">
                    <EditForm Model="_commentContent" OnValidSubmit="VerifyAuthenticatedUser" class="row">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="col-sm-12 col-md-10 margin-top-10">
                            <InputTextArea class="form-control p-2" placeholder="Add Comment" rows="1"
                                           autofocus tabindex="1" @bind-Value="_commentContent.Content"/>
                        </div>
                        <div class="col-sm-12 col-md-2 d-grid gap-2">
                            @if (_commentProcess)
                            {
                                <button class="btn btn-outline-primary" tabindex="2" disabled>
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    Commentando...
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-primary" tabindex="2">
                                    Comentar
                                    <i class="ri-send-plane-fill"></i>
                                </button>
                            }
                        </div>
                        <div class="col-12 text-danger form-label">
                            <ValidationMessage For="() => _commentContent.Content"></ValidationMessage>
                        </div>
                    </EditForm>
                </div>
                <!--/ End Comment box -->
                <!-- Comments -->
                <div class="comment-body mt-1">
                    @if (_commentsLookups == null)
                    {
                        <p>Cargando commentarios...</p>
                    }
                    else
                    {
                        @foreach (var comment in _commentsLookups)
                        {
                            <CommentCard Comment="comment"></CommentCard>
                        }
                    }
                </div>
                <!-- Comments -->
            </div>
        </div>
    }
    <br><br><br><br><br>
</Content>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> Authentication { get; set; }

    [Parameter]
    public string AudioId { get; set; }

    private AudioLookup _audioLookup = new();
    private CommentContent _commentContent = new();
    private IReadOnlyList<CommentLookup> _commentsLookups;
    private HubConnection _hubConnection;
    private long _comments;
    private bool _commentProcess;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/commenthub"))
            .Build();

        _hubConnection.On("ReceiveMessage", async () =>
        {
            await NumberOfComments();
            await GetAllComments();
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

    // Cargar información de audio
        await GetAudioById();
        await NumberOfComments();
        await _jsRuntime.InvokeVoidAsync("loadWaveSurfer", $"{_audioLookup.UrlAudio}");
    // Cargar comentarios
        await GetAllComments();
    }

    private async Task SendMessage() => await _hubConnection.SendAsync("SendMessage");

    private bool IsConnected() => _hubConnection.State == HubConnectionState.Connected;

    private async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task NumberOfComments()
    {
        _comments = await _httpClient.GetFromJsonAsync<long>($"api/comment/countComments/{AudioId}");
    }

    private async Task GetAudioById()
    {
        _audioLookup = await _httpClient.GetFromJsonAsync<AudioLookup>($"api/audio/GetAudioById/{AudioId}");
    }

    private async Task CreateComment()
    {
        _commentProcess = true;

        var userId = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "Id");

        var comment = new Comment()
        {
            AudioId = AudioId,
            UserId = userId,
            Content = _commentContent.Content
        };

        var httpResponseMessage = await _httpClient.PostAsJsonAsync("api/comment", comment);

        if (httpResponseMessage.StatusCode == HttpStatusCode.Created)
        {
            _commentProcess = false;
            _commentContent = new CommentContent();
            if (IsConnected())
            {
                await SendMessage();
            }
        }
    }

    private async Task GetAllComments()
    {
        _commentsLookups = await _httpClient.GetFromJsonAsync<IReadOnlyList<CommentLookup>>($"api/comment/GetAllComments/{AudioId}");
        StateHasChanged();
    }

    private async Task VerifyAuthenticatedUser()
    {
        var authState = await Authentication;
        var claimsPrincipal = authState.User;

        if (claimsPrincipal.Identity is {IsAuthenticated: true})
        {
            await CreateComment();
        }
        else
        {
            Console.WriteLine("No estas autenticado");
        }
    }
    
    private async Task PlayMusic()
    {
        string userDisplayName = "DJ de SpotMixes";

        foreach (var user in _audioLookup.User)
        {
            userDisplayName = user.DisplayName;
        }
        
        await _jsRuntime.InvokeVoidAsync("playMusic", 
            _audioLookup.Title, 
            userDisplayName, 
            _audioLookup.UrlAudio, 
            _audioLookup.UrlCover, 
            true);
    }
}