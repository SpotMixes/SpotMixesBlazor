@page "/Register"
@using System.Net
@layout AuthenticationLayout
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject ILoginService _loginService
@inject IJSRuntime _jsRuntime

<!-- Left Text-->
<div class="d-none d-lg-flex col-lg-8 align-items-center p-5">
    <div class="w-100 d-lg-flex align-items-center justify-content-center px-5">
        <img class="img-fluid" src="public/page/register/cover-register.svg" alt="Imagen inicio de sesión SpotMixes"/>
    </div>
</div>
<!-- /Left Text-->
<!-- Register-->
<div class="d-flex col-lg-4 align-items-center auth-bg px-2 p-lg-5">
    <div class="col-12 col-sm-8 col-md-6 col-lg-12 px-xl-2 mx-auto">
        <h2 class="card-title fw-bold mb-1">La aventura comienza aquí 🚀</h2>
        <p class="card-text mb-2">Regístrate y comienza a disfrutar buena música 🎵</p>
        <EditForm Model="_userRegister" OnValidSubmit="RegisterUserWithEmail" class="mt-2">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="mb-1">
                <label class="form-label" for="register-nickname">Nombre visible:</label>
                <button type="button" class="btn btn-icon rounded-circle btn-flat-info waves-effect" 
                        data-bs-toggle="popover" data-bs-placement="right" data-bs-container="body" title="Nombre visible" 
                        data-bs-content="Tú nombre visible puede ser cualquier cosa que te guste. Tú nombre o nombre artístico son buenas opciones.">
                    <i class="ri-information-line"></i>
                </button>
                <InputText class="form-control" id="register-nickname" type="text"
                           placeholder="Escribe tú nombre visible" autofocus="" tabindex="1"
                           @bind-Value="_userRegister.Nickname"/>
                <div class="text-danger form-label">
                    <ValidationMessage For="() => _userRegister.Nickname"></ValidationMessage>
                </div>
            </div>
            <div class="mb-1">
                <label class="form-label" for="register-email">Correo electrónico:</label>
                <InputText class="form-control" id="register-email" type="email"
                           placeholder="Escribe tú correo electrónico:" tabindex="2"
                           @bind-Value="_userRegister.Email"/>
                <div class="text-danger form-label">
                    <ValidationMessage For="() => _userRegister.Email"></ValidationMessage>
                </div>
            </div>
            <div class="mb-1">
                <label class="form-label" for="register-password">Contraseña:</label>
                <InputText class="form-control" id="register-password" type="password"
                           placeholder="Escribe tú contraseña" tabindex="3"
                           @bind-Value="_userRegister.Password"/>
                <div class="text-danger form-label">
                    <ValidationMessage For="() => _userRegister.Password"></ValidationMessage>
                </div>
            </div>
            <div class="mb-1">
                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="register-privacy-policy"
                                   type="checkbox" tabindex="4"
                                   @bind-Value="_userRegister.PoliciesConditions"/>
                    <label class="form-check-label" for="register-privacy-policy">
                        Acepto las <a href="#">políticas de privacidad y condiciones</a>
                    </label>
                </div>
                <div class="text-danger form-label">
                    <ValidationMessage For="() => _userRegister.PoliciesConditions"></ValidationMessage>
                </div>
            </div>
            <button class="btn btn-primary w-100" tabindex="5">Regístrate ahora</button>
        </EditForm>
        <p class="text-center mt-2">
            <span>¿Ya tienes cuenta?</span>
            <a href="/login">
                <span>Inicia sesión</span>
            </a>
        </p>
        @*<div class="divider my-2">
            <div class="divider-text">Usa una de tus redes</div>
        </div>
        <div class="auth-footer-btn d-flex justify-content-center">
            <a class="btn btn-facebook" href="#">
                <i class="ri-facebook-fill"></i>
            </a>
            <a class="btn btn-twitter white" href="#">
                <i class="ri-twitter-fill"></i>
            </a>
            <a class="btn btn-google" href="#">
                <i class="ri-google-fill"></i>
            </a>
        </div>*@
    </div>
</div>

<script src="src/js/components/components-popovers.min.js" suppress-error="BL9992"></script>

@code
{
    private readonly UserRegister _userRegister = new();
    private UserClaims _claims;

    private async Task RegisterUserWithEmail()
    {
        using var httpResponse = await _httpClient.PostAsJsonAsync("/api/user/register", _userRegister);

        switch (httpResponse.StatusCode)
        {
            case HttpStatusCode.Created:
            {
                _claims = await httpResponse.Content.ReadFromJsonAsync<UserClaims>();
                if (_claims != null)
                {
                    await _loginService.Login(_claims.Token);
                    await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "Email", _claims.Email);
                    await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "Nickname", _claims.Nickname);
                    await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "UrlProfilePicture", _claims.UrlProfilePicture);
                    await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "UrlProfile", _claims.UrlProfile);
                    await _jsRuntime.InvokeAsync<string>("window.location.replace", "/");
                }
                break;
            }
            case HttpStatusCode.BadRequest:
            {
                var error = httpResponse.Content.ReadAsStringAsync().Result;
                await _jsRuntime.InvokeVoidAsync("showToast", "error", "Error", $"🙄 {error}");
                break;
            }
            case HttpStatusCode.Conflict:
            {
                var error = httpResponse.Content.ReadAsStringAsync().Result;
                await _jsRuntime.InvokeVoidAsync("showToast", "error", "Error", $"😥 {error}");
                break;
            } 
            default:
                await _jsRuntime.InvokeVoidAsync("showToast", "info", "Información", "😥 El servidor se encuentra en mantenimiento, disculpe las molestias.");
                break;
        }
    }
}