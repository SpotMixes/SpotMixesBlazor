@page "/verificar-correo/{UserId}"
@using SpotMixesBlazor.Shared.ModelsData
@layout AuthenticationLayout
@inject ILoginService _loginService
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient

<div class="auth-wrapper auth-basic px-2">
    <div class="auth-inner my-2">
        <!-- verify email basic -->
        <div class="card mb-0">
            <div class="card-body">
                <a href="/" class="brand-logo">
                    <img src="public/brand/SpotMixes-Logo-TypographyDown.svg" alt="Logo SpotMixes" style="height: 50px"/>
                </a>
                <h2 class="card-title fw-bolder mb-1">Verifique su correo electrónico ✉️</h2>
                <p class="card-text mb-2">
                    Hemos enviado el código de verificación a su dirección de correo electrónico:
                    <span class="fw-bolder">@_user.Email</span>
                </p>
                <EditForm Model="_emailVerificationCode" OnValidSubmit="ValidateEmailVerificationCode" class="auth-forgot-password-form mt-2">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="mb-2">
                        <label for="verification-code" class="form-label">Código de verificación</label>
                        <InputText class="form-control" id="verification-code" type="text"
                                   placeholder="Escriba el código de verificación" tabindex="1" autofocus=""
                                   @bind-Value="_emailVerificationCode.CodeVerifyEmail"
                                   onkeyup="this.value=this.value.toUpperCase();"
                                   maxlength="6">
                        </InputText>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _emailVerificationCode.CodeVerifyEmail"></ValidationMessage>
                        </div>
                    </div>
                    @if (_verificationProcess)
                    {
                        <button class="btn btn-primary w-100" tabindex="5" disabled="">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Verificando...
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary w-100" tabindex="2">Verificar</button>
                    }
                </EditForm>
                <p class="text-center mt-2">
                    <span>¿No es su correo electrónico? </span>
                    <a href="/registrar">
                        <span>Vuelve a registrarte</span>
                    </a>
                    <br>
                    <span>😉 Si no te llega el correo, solo actualiza la página.</span>
                </p>
            </div>
        </div>
        <!-- / verify email basic -->
    </div>
</div>

@code {
    [Parameter]
    public string UserId { get; set; }

    private EmailVerificationCode _emailVerificationCode = new();
    private Session _session = new();
    private User _user = new();
    private bool _verificationProcess;

    protected override async Task OnInitializedAsync()
    {
        await _jsRuntime.InvokeVoidAsync("includeCss", "src/css/pages/authentication.css", "authentication");
        await GetUserById();
        await GetSessionByUserEmail();
        
        var sendEmail = new SendEmail()
        {
            DisplayName = _user.DisplayName,
            ToEmail = _user.Email,
            CodeVerifyEmail = _user.CodeVerifyEmail
        };
        await SendEmailWithVerificationCode(sendEmail);
    }

    private async Task SendEmailWithVerificationCode(SendEmail sendEmail)
    {
        await _httpClient.PostAsJsonAsync("api/mail/SendEmailWithVerificationCode", sendEmail);
    }
    
    private async Task GetUserById()
    {
        _user = await _httpClient.GetFromJsonAsync<User>($"api/user/GetUserById/{UserId}");
    }

    private async Task GetSessionByUserEmail()
    {
        _session = await _httpClient.GetFromJsonAsync<Session>($"api/session/GetSessionByUserEmail/{_user.Email}");
    }

    private async Task ValidateEmailVerificationCode()
    {
        _verificationProcess = true;

        if (_emailVerificationCode.CodeVerifyEmail.Equals(_user.CodeVerifyEmail))
        {
            _user.VerifiedEmail = true;
            await _httpClient.PutAsJsonAsync($"api/user/{_user.Id}", _user);

            await _loginService.Login(_session.UserJwt);
            await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "Id", _user.Id);
            await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "Email", _user.Email);
            await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "DisplayName", _user.DisplayName);
            await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "IsDj", _user.IsDj);
            await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "UrlProfilePicture", _user.UrlProfilePicture);
            await _jsRuntime.InvokeAsync<string>("localStorage.setItem", "UrlProfile", _user.UrlProfile);

            _verificationProcess = false;
            await _jsRuntime.InvokeAsync<string>("window.location.replace", "/");
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync(
                "showToast",
                "error",
                "Error",
                $"🤔 El código {_emailVerificationCode.CodeVerifyEmail} no es el correcto, inténtelo de nuevo por favor.");
            
            _emailVerificationCode = new EmailVerificationCode();
            _verificationProcess = false;
        }
    }
}