@page "/"
@using System.Net.Http.Headers
@inject HttpClient _httpClient

<!-- BEGIN: Content-->
<div class="app-content content ecommerce-application">
    <div class="content-overlay"></div>
    <div class="header-navbar-shadow"></div>
    <div class="content-wrapper container-xxl p-0">
        <div class="content-header row">
            <h2 class="text-primary">Publicaciones</h2>
        </div>
        <div class="content-detached content-right">
            <div class="content-body">
                <!-- Post Header Starts -->
                <section id="ecommerce-header">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="ecommerce-header-items">
                                <div class="result-toggler">
                                    <button class="navbar-toggler shop-sidebar-toggler" type="button" data-bs-toggle="collapse">
                                        <span class="navbar-toggler-icon d-block d-lg-none">
                                            <i class="ri-filter-3-fill"></i>
                                        </span>
                                    </button>
                                    @if (_audios != null)
                                    {
                                        <div class="search-results">@_audios.Count resultados</div>
                                    }
                                </div>
                                <AuthorizeView>
                                    <Authorized>
                                        <div class="view-options d-flex">
                                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#InsertAudio">
                                                <i class="ri-upload-2-fill me-1"></i>
                                                Publicar
                                            </button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                                <!-- Modal -->
                                <div class="modal fade text-start" id="InsertAudio" data-bs-backdrop="static" 
                                     data-bs-keyboard="false" tabindex="-1" aria-labelledby="InsertAudio" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h4 class="modal-title">Publicar audio</h4>
                                                @if (!_fileUpload)
                                                {
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                }
                                            </div>
                                            <EditForm Model="_audio" OnValidSubmit="SaveAudio">
                                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                                <div class="modal-body">
                                                    <div class="mb-1">
                                                        <label class="form-label">Título:</label>
                                                        <InputText type="text" class="form-control" @bind-Value="_audio.Title"/>
                                                        <div class="text-danger form-label">
                                                            <ValidationMessage For="() => _audio.Title"></ValidationMessage>
                                                        </div>
                                                    </div>
                                                    <div class="mb-1">
                                                        <label class="form-label">Genero:</label>
                                                        <InputSelect class="form-select" @bind-Value="_audio.Genres">
                                                            <option selected></option>
                                                            <option Value="Ambiente">Ambiente</option>
                                                            <option Value="Clásica">Clásica</option>
                                                            <option Value="Country">Country</option>
                                                            <option Value="Dance y EDM">Dance y EDM</option>
                                                            <option Value="Dancehall">Dancehall</option>
                                                            <option Value="Deep house">Deep house</option>
                                                            <option Value="Disco">Disco</option>
                                                            <option Value="Dubstep">Dubstep</option>
                                                            <option Value="Electrónica">Electrónica</option>
                                                            <option Value="Hip hop y Rap">Hip hop y Rap</option>
                                                            <option Value="House">House</option>
                                                            <option Value="Latina">Latina</option>
                                                            <option Value="Metal">Metal</option>
                                                            <option Value="Reggae">Reggae</option>
                                                            <option Value="Reguetón">Reguetón</option>
                                                            <option Value="Rock">Rock</option>
                                                            <option Value="Techno">Techno</option>
                                                            <option Value="Trap">Trap</option>
                                                            <option Value="Triphop">Triphop</option>
                                                        </InputSelect>
                                                        <div class="text-danger form-label">
                                                            <ValidationMessage For="() => _audio.Genres"></ValidationMessage>
                                                        </div>
                                                    </div>
                                                    <div>
                                                        <label class="form-label">Audio: </label>
                                                        <InputFile type="file" class="form-control" accept=".mp3" OnChange="OnAudioChange"/>
                                                    </div>
                                                    <div>
                                                        <label class="form-label">Imagen: </label>
                                                        <InputFile type="file" class="form-control" accept="image/*" OnChange="OnCoverChange"/>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    @if (_fileUpload)
                                                    {
                                                        <button class="btn btn-outline-primary" type="button" disabled>
                                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                            <span class="ms-25 align-middle">Subiendo...</span>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button type="submit" class="btn btn-primary">Publicar</button>
                                                    }
                                                </div>
                                            </EditForm>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </section>
                <!-- Post Header Ends -->

                <!-- background Overlay when sidebar is shown  starts-->
                <div class="body-content-overlay"></div>
                <!-- background Overlay when sidebar is shown  ends-->

                <!-- Post Search Bar Starts -->
                <section id="ecommerce-searchbar" class="ecommerce-searchbar">
                    <div class="row mt-1">
                        <div class="col-sm-12">
                            <div class="input-group input-group-merge">
                                <input type="text" class="form-control search-product" id="shop-search" placeholder="Search Product"
                                       aria-label="Buscar..." aria-describedby="shop-search"/>
                                <span class="input-group-text">
                                    <i data-feather="search" class="text-muted"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- Post Search Bar Ends -->

                <!-- Post List Starts -->
                <section id="ecommerce-products" class="grid-view">
                    @if (_audios == null)
                    {
                        <p>Cargando Audio..</p>
                    }
                    else
                    {
                        @foreach (var audio in _audios)
                        {
                            <Post Audio="audio"></Post>
                        }
                    }
                </section>
                <!-- Post List Ends -->
                <Pagination></Pagination>
            </div>
        </div>
        <div class="sidebar-detached sidebar-left">
            <div class="sidebar">
                <!-- Post Sidebar Starts -->
                <div class="sidebar-shop">
                    <div class="row">
                        <div class="col-sm-12">
                            <h6 class="filter-heading d-none d-lg-block">Filtros</h6>
                        </div>
                    </div>
                    <Filters></Filters>
                </div>
                <!-- Post Sidebar Ends -->
            </div>
        </div>
    </div>
</div>
<!-- END: Content-->

<!-- Page JS-->
<script src="src/js/page/app-ecommerce.js" suppress-error="BL9992"></script>
<!-- End Page JS-->

@code
{
    private IReadOnlyList<Audio> _audios;
    private Audio _audio = new();
    private IBrowserFile AudioFile { get; set; }
        private const long MaxAudioUploadSize = 20 * 1000000;
    private IBrowserFile ImageFile { get; set; }
        private const long MaxImageUploadSize = 5 * 1000000;
    private bool _fileUpload;

    protected override async Task OnInitializedAsync()
    {
        await GetAllAudios();
    }

    private async Task GetAllAudios()
    {
        _audios = await _httpClient.GetFromJsonAsync<IReadOnlyList<Audio>>("api/audio/all/0");
    }

    // Selecting a file in the audio input
    private void OnAudioChange(InputFileChangeEventArgs e)
    {
        if (e?.File is null) return;

        if (e.File.Size > MaxAudioUploadSize)
        {
            Console.WriteLine("Tamaño pasado");
            return;
        }

        AudioFile = e.File;
    }

    // Selecting a file in the audio cover input
    private void OnCoverChange(InputFileChangeEventArgs e)
    {
        if (e?.File is null) return;

        if (e.File.Size > MaxImageUploadSize)
        {
            Console.WriteLine("Tamaño pasado");
            return;
        }

        ImageFile = e.File;
    }

    // Method to save audio information in the database and in the cloud storage
    private async Task SaveAudio()
    {
        _fileUpload = true;
        using var audioContent = new MultipartFormDataContent();
        using var imageContent = new MultipartFormDataContent();

    // Saving audio to the cloud
        try
        {
            var fileContent = new StreamContent(AudioFile.OpenReadStream(MaxAudioUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(AudioFile.ContentType);
            audioContent.Add(fileContent, "\"files\"", AudioFile.Name);

            var responseAudio = await _httpClient.PostAsync("api/upload/audios-mp3", audioContent);
            _audio.UrlAudio = await responseAudio.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    // Saving audio cover to the cloud
        try
        {
            var fileContent = new StreamContent(ImageFile.OpenReadStream(MaxImageUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(ImageFile.ContentType);
            imageContent.Add(fileContent, "\"files\"", ImageFile.Name);

            var responseImage = await _httpClient.PostAsync("api/upload/audios-cover", imageContent);
            _audio.UrlCover = await responseImage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    // Saving audio information in the database
        if (string.IsNullOrEmpty(_audio.UrlAudio) || string.IsNullOrEmpty(_audio.UrlCover) || string.IsNullOrEmpty(_audio.UserId))
        {
            Console.WriteLine("Audio no guardado intentelo de nuevo");
        }
        else
        {
            await _httpClient.PostAsJsonAsync("api/audio", _audio);
            await GetAllAudios();
        }

    // Clear model information
        _audio = new Audio();
        _fileUpload = false;
    }
}