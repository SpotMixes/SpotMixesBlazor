@inject PageService _pageService

<div class="card" style="height: 100%">
    <div class="card-body">
        <!-- Filter starts -->
        <div class="multi-range-price">
            <h6 class="filter-title mt-0">Rango</h6>
            <ul class="list-unstyled price-range" id="filter-audio">
                <li>
                    <div class="form-check">
                        <input type="radio" id="allAudio" name="filter-audio" 
                               class="form-check-input" @onclick="GetAllAudios" checked/>
                        <label class="form-check-label" for="allAudio">Todas</label>
                    </div>
                </li>
                <li>
                    <div class="form-check">
                        <input type="radio" id="recentAudio" name="filter-audio" 
                               class="form-check-input" @onclick="GetRecentAudios"/>
                        <label class="form-check-label" for="recentAudio">Recientes</label>
                    </div>
                </li>
                <li>
                    <div class="form-check">
                        <input type="radio" id="mostListenedAudios" name="filter-audio" 
                               class="form-check-input" @onclick="GetMostListenedAudios"/>
                        <label class="form-check-label" for="mostListenedAudios">Más escuchadas</label>
                    </div>
                </li>
            </ul>
        </div>
        <!-- Filter ends -->
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<string> GetAudios { get; set; }

    private async Task GetAllAudios()
    {
        _pageService.ViewAll = true;
        _pageService.ViewRecent = false;
        _pageService.ViewMostListened = false;
        await GetAudios.InvokeAsync($"api/audio/all/{_pageService.ValueAll}");
    }

    private async Task GetRecentAudios()
    {
        _pageService.ViewAll = false;
        _pageService.ViewRecent = true;
        _pageService.ViewMostListened = false;
        await GetAudios.InvokeAsync($"api/audio/recent/{_pageService.ValueRecent}");
    }

    private async Task GetMostListenedAudios()
    {
        _pageService.ViewAll = false;
        _pageService.ViewRecent = false;
        _pageService.ViewMostListened = true;
        await GetAudios.InvokeAsync($"api/audio/mostListened/{_pageService.ValueMostListened}");
    }
}