@using System.Net.Http.Headers
@using System.Net
@using SpotMixesBlazor.Client.Helpers
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

<!-- Modal -->
<div class="modal fade text-start" id="InsertAudio" data-bs-backdrop="static"
     data-bs-keyboard="false" tabindex="-1" aria-labelledby="InsertAudio" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Publicar audio</h4>
                @if (_publishingProcess == false)
                {
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                }
            </div>
            <EditForm Model="_audio" OnValidSubmit="SaveAudio">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-body">
                    <div class="mb-1">
                        <label class="form-label">Título:</label>
                        <InputText class="form-control" tabindex="1" autofocus
                                   @bind-Value="_audio.Title"/>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.Title"></ValidationMessage>
                        </div>
                    </div>
                    <div class="mb-1">
                        <label class="form-label">Genero:</label>
                        <InputSelect class="form-select" tabindex="2" @bind-Value="_audio.Genres">
                            <option selected>Seleccionar...</option>
                            @foreach (var genre in _listsHelper.MusicGenres())
                            {
                                <option value="@genre">@genre</option>
                            }
                        </InputSelect>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.Genres"></ValidationMessage>
                        </div>
                    </div>
                    <div class="mb-1">
                        <label for="textarea-counter" class="form-label">Descipción</label>
                        <InputTextArea data-length="300" class="form-control char-textarea"
                                       id="textarea-counter" tabinx="3"
                                       rows="2" placeholder="Ingresa una descripción del mix"
                                       @bind-Value="_audio.Description" style="height: 100px">
                        </InputTextArea>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.Description"/>
                        </div>
                        <small class="textarea-counter-value float-end">
                            <span class="char-count">0</span> / 300
                        </small>
                    </div>
                    <div class="mb-1">
                        <label class="form-label">Audio: </label>
                        <InputFile class="form-control" tabindex="4" accept=".mp3"
                                   OnChange="OnAudioChange" @bind-Value="_audio.UrlAudio"/>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.UrlAudio"></ValidationMessage>
                        </div>
                    </div>
                    <div class="mb-1">
                        <label class="form-label">Imagen: </label>
                        <InputFile type="file" class="form-control" tabindex="5" accept="image/*"
                                   OnChange="OnCoverChange" @bind-Value="_audio.UrlCover"/>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.UrlAudio"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (_publishingProcess)
                    {
                        <button class="btn btn-outline-primary" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-25 align-middle">Subiendo...</span>
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary" tabindex="6">Publicar</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    // Cargar datos a la clase y vista
    private AudioInsertData _audio = new();
    private readonly ListsHelper _listsHelper = new();

    // Guardar informacion de los archivos seleccionados
    private IBrowserFile AudioFile { get; set; }
        private const long MaxAudioUploadSize = 100 * 1000000;
    private IBrowserFile ImageFile { get; set; }
        private const long MaxImageUploadSize = 2 * 1000000;
    
    // Indicar el proceo del la carga de audio Nunbe - DB
    private bool _publishingProcess = false;

    // Selecting a file in the audio input
    private async void OnAudioChange(InputFileChangeEventArgs e)
    {
        if (e?.File is null) return;

        if (e.File.Size > MaxAudioUploadSize)
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "info",
                "Audio", $"🙄 El archivo debe ser menor a 100 MB");
            return;
        }

        _audio.UrlAudio = "temporaryUrl";
        AudioFile = e.File;
    }

    // Selecting a file in the audio cover input
    private async void OnCoverChange(InputFileChangeEventArgs e)
    {
        if (e?.File is null) return;

        if (e.File.Size > MaxImageUploadSize)
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "info",
                "Cover", $"🙄 El archivo debe ser menor a 2 MB");
            return;
        }

        _audio.UrlCover = "temporaryUrl";
        ImageFile = e.File;
    }
    
    private async Task SaveAudioInTheCloud()
    {
        using var audioContent = new MultipartFormDataContent();
        try
        {
            var fileContent = new StreamContent(AudioFile.OpenReadStream(MaxAudioUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(AudioFile.ContentType);
            audioContent.Add(fileContent, "\"files\"", AudioFile.Name);

            var responseAudio = await _httpClient.PostAsync("api/upload/audios-mp3", audioContent);

            if (responseAudio.StatusCode == HttpStatusCode.OK)
            {
                _audio.UrlAudio = await responseAudio.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task SaveAudioCoverInTheCloud()
    {
        using var imageContent = new MultipartFormDataContent();
        try
        {
            var fileContent = new StreamContent(ImageFile.OpenReadStream(MaxImageUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(ImageFile.ContentType);
            imageContent.Add(fileContent, "\"files\"", ImageFile.Name);

            var responseImage = await _httpClient.PostAsync("api/upload/audios-cover", imageContent);

            if (responseImage.StatusCode == HttpStatusCode.OK)
            {
                _audio.UrlCover = await responseImage.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    // Method to save audio information in the database and in the cloud storage
    private async Task SaveAudio()
    {
        _publishingProcess = true;

        await SaveAudioInTheCloud();
        await SaveAudioCoverInTheCloud();

        if (_audio.UrlAudio != "temporaryUrl" || _audio.UrlCover != "temporaryUrl")
        {
            _audio.UserId = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "Id");

            await _httpClient.PostAsJsonAsync("api/audio", _audio);
            await _jsRuntime.InvokeVoidAsync("showToast", "success",
                "Guardar", "🥳 ¡Genial! Tú publicación se ha subido correctamente.");
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "error",
                "Guardar", "😪 Error al subir el audio, inténtelo mas tarde.");
        }
        
        _audio = new AudioInsertData();
        _publishingProcess = false;
    }

}