@using System.Net.Http.Headers
@using System.Net
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

<!-- Modal -->
<div class="modal fade text-start" id="InsertAudio" data-bs-backdrop="static"
     data-bs-keyboard="false" tabindex="-1" aria-labelledby="InsertAudio" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Publicar audio</h4>
                @if (!_fileUpload)
                {
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                }
            </div>
            <EditForm Model="_audio" OnValidSubmit="SaveAudio">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-body">
                    <div class="mb-1">
                        <label class="form-label">Título:</label>
                        <InputText type="text" class="form-control" @bind-Value="_audio.Title"/>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.Title"></ValidationMessage>
                        </div>
                    </div>
                    <div class="mb-1">
                        <label class="form-label">Genero:</label>
                        <InputSelect class="form-select" @bind-Value="_audio.Genres">
                            <option selected></option>
                            <option Value="Ambiente">Ambiente</option>
                            <option Value="Clásica">Clásica</option>
                            <option Value="Country">Country</option>
                            <option Value="Dance y EDM">Dance y EDM</option>
                            <option Value="Dancehall">Dancehall</option>
                            <option Value="Deep house">Deep house</option>
                            <option Value="Disco">Disco</option>
                            <option Value="Dubstep">Dubstep</option>
                            <option Value="Electrónica">Electrónica</option>
                            <option Value="Hip hop y Rap">Hip hop y Rap</option>
                            <option Value="House">House</option>
                            <option Value="Latina">Latina</option>
                            <option Value="Metal">Metal</option>
                            <option Value="Reggae">Reggae</option>
                            <option Value="Reguetón">Reguetón</option>
                            <option Value="Rock">Rock</option>
                            <option Value="Techno">Techno</option>
                            <option Value="Trap">Trap</option>
                            <option Value="Triphop">Triphop</option>
                        </InputSelect>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.Genres"></ValidationMessage>
                        </div>
                    </div>
                    <div>
                        <label class="form-label">Audio: </label>
                        <InputFile type="file" class="form-control" accept=".mp3" OnChange="OnAudioChange"
                                   @bind-Value="_audio.UrlAudio"/>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.UrlAudio"></ValidationMessage>
                        </div>
                    </div>
                    <div>
                        <label class="form-label">Imagen: </label>
                        <InputFile type="file" class="form-control" accept="image/*" OnChange="OnCoverChange"
                                   @bind-Value="_audio.UrlCover"/>
                        <div class="text-danger form-label">
                            <ValidationMessage For="() => _audio.UrlAudio"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (_fileUpload)
                    {
                        <button class="btn btn-outline-primary" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-25 align-middle">Subiendo...</span>
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary">Publicar</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<string> GetAudios { get; set; }

    private Audio _audio = new();
    private IBrowserFile AudioFile { get; set; }
        private const long MaxAudioUploadSize = 20 * 1000000;
    private IBrowserFile ImageFile { get; set; }
        private const long MaxImageUploadSize = 1 * 1000000;
    private bool _fileUpload = false;

    // Selecting a file in the audio input
    private async void OnAudioChange(InputFileChangeEventArgs e)
    {
        if (e?.File is null) return;

        if (e.File.Size > MaxAudioUploadSize)
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "info",
                "Audio", $"🙄 El archivo debe ser menor a 100 MB");
            return;
        }

        _audio.UrlAudio = "temporaryUrl";
        AudioFile = e.File;
    }

    // Selecting a file in the audio cover input
    private async void OnCoverChange(InputFileChangeEventArgs e)
    {
        if (e?.File is null) return;

        if (e.File.Size > MaxImageUploadSize)
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "info",
                "Cover", $"🙄 El archivo debe ser menor a 2 MB");
            return;
        }

        _audio.UrlCover = "temporaryUrl";
        ImageFile = e.File;
    }

    private async Task LoadExternalUserData()
    {
        /*_audio.UserNickname = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "Nickname");
        _audio.UserUrlProfilePicture = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "UrlProfilePicture");
        */
        
        var email = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "Email");
        var httpResponse = await _httpClient.GetAsync($"api/User/searchUserByEmail/{email}");

        if (httpResponse.StatusCode == HttpStatusCode.OK)
        {
            var user = await httpResponse.Content.ReadFromJsonAsync<User>();
            if (user != null) _audio.UserId = user.Id;
        }
    }
    
    // Method to save audio information in the database and in the cloud storage
    private async Task SaveAudio()
    {
        _fileUpload = true;

        await LoadExternalUserData();
        
        if (/*string.IsNullOrEmpty(_audio.UserNickname) ||
            string.IsNullOrEmpty(_audio.UserUrlProfilePicture) ||*/ 
            string.IsNullOrEmpty(_audio.UserId))
        {
            await _jsRuntime.InvokeVoidAsync("showToast", "error",
                "Guardar", "😪 Error al subir el audio, inténtelo mas tarde.");

            _fileUpload = false;
        }
        else
        {
            await SaveAudioInTheCloud();
            await SaveAudioCoverInTheCloud();
            
            if (_audio.UrlAudio == "temporaryUrl" || _audio.UrlCover == "temporaryUrl")
            {
                await _jsRuntime.InvokeVoidAsync("showToast", "error",
                    "Guardar", "😪 Servidor en mantenimiento, intente más tarde.");
                _fileUpload = false;
            }
            else
            {
                await _httpClient.PostAsJsonAsync("api/audio", _audio);
                await GetAudios.InvokeAsync("api/audio/all/0");
                // Clear model information
                _audio = new Audio();
                _fileUpload = false;
                await _jsRuntime.InvokeVoidAsync("showToast", "success",
                    "Guardar", "🥳 ¡Genial! Tú publicación se ha subido correctamente.");
            }
        }
    }

    private async Task SaveAudioInTheCloud()
    {
        using var audioContent = new MultipartFormDataContent();
        try
        {
            var fileContent = new StreamContent(AudioFile.OpenReadStream(MaxAudioUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(AudioFile.ContentType);
            audioContent.Add(fileContent, "\"files\"", AudioFile.Name);

            var responseAudio = await _httpClient.PostAsync("api/upload/audios-mp3", audioContent);

            if (responseAudio.StatusCode == HttpStatusCode.OK)
            {
                _audio.UrlAudio = await responseAudio.Content.ReadAsStringAsync();
            }
            else
            {
                Console.WriteLine(responseAudio.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task SaveAudioCoverInTheCloud()
    {
        using var imageContent = new MultipartFormDataContent();
        try
        {
            var fileContent = new StreamContent(ImageFile.OpenReadStream(MaxImageUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(ImageFile.ContentType);
            imageContent.Add(fileContent, "\"files\"", ImageFile.Name);

            var responseImage = await _httpClient.PostAsync("api/upload/audios-cover", imageContent);

            if (responseImage.StatusCode == HttpStatusCode.OK)
            {
                _audio.UrlCover = await responseImage.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    
}