@using SpotMixesBlazor.Client.Helpers
@inject PaginationService _paginationService

<div class="card" style="height: 100%">
    <div class="card-body">
        <!-- Filter starts -->
        <div class="multi-range-price">
            <h6 class="filter-title mt-0">Rango</h6>
            <ul class="list-unstyled price-range" id="filter-audio">
                <li>
                    <div class="form-check">
                        <input type="radio" id="mostListenedAudios" name="filter-audio"
                               class="form-check-input" @onclick="GetMostListenedAudios" checked/>
                        <label class="form-check-label" for="mostListenedAudios">Más escuchadas</label>
                    </div>
                </li>
                <li>
                    <div class="form-check">
                        <input type="radio" id="recentAudio" name="filter-audio"
                               class="form-check-input" @onclick="GetRecentAudios"/>
                        <label class="form-check-label" for="recentAudio">Recientes</label>
                    </div>
                </li>
                <li>
                    <div class="form-check">
                        <input type="radio" id="allAudio" name="filter-audio"
                               class="form-check-input" @onclick="GetAllAudios"/>
                        <label class="form-check-label" for="allAudio">Todas</label>
                    </div>
                </li>
            </ul>
        </div>
        <!-- Filter ends -->
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<string> GetAudios { get; set; }

    private async Task GetMostListenedAudios()
    {
        _paginationService.FilterMostListened = true;
        _paginationService.FilterRecent = false;
        _paginationService.FilterAll = false;
        await GetAudios.InvokeAsync($"api/audio/mostListened/30/{_paginationService.SkipMostListened}");
    }

    private async Task GetRecentAudios()
    {
        _paginationService.FilterMostListened = false;
        _paginationService.FilterRecent = true;
        _paginationService.FilterAll = false;
        await GetAudios.InvokeAsync($"api/audio/recent/30/{_paginationService.SkipRecent}");
    }

    private async Task GetAllAudios()
    {
        _paginationService.FilterMostListened = false;
        _paginationService.FilterRecent = false;
        _paginationService.FilterAll = true;
        await GetAudios.InvokeAsync($"api/audio/all/30/{_paginationService.SkipAll}");
    }
}